// Generated by Dagger (https://google.github.io/dagger).
package com.rain.weather.ui;

import androidx.lifecycle.LiveData;
import dagger.internal.Factory;
import com.rain.weather.data.local.entity.WeatherResponse;
import com.rain.weather.repository.WeatherRepository;
import com.rain.weather.utils.Resource;
import javax.inject.Provider;

public final class WeatherViewModel_Factory implements Factory<WeatherViewModel> {
  private final Provider<WeatherRepository<LiveData<Resource<WeatherResponse>>>> repositoryProvider;

  public WeatherViewModel_Factory(
      Provider<WeatherRepository<LiveData<Resource<WeatherResponse>>>> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public WeatherViewModel get() {
    return provideInstance(repositoryProvider);
  }

  public static WeatherViewModel provideInstance(
      Provider<WeatherRepository<LiveData<Resource<WeatherResponse>>>> repositoryProvider) {
    return new WeatherViewModel(repositoryProvider.get());
  }

  public static WeatherViewModel_Factory create(
      Provider<WeatherRepository<LiveData<Resource<WeatherResponse>>>> repositoryProvider) {
    return new WeatherViewModel_Factory(repositoryProvider);
  }

  public static WeatherViewModel newWeatherViewModel(
      WeatherRepository<LiveData<Resource<WeatherResponse>>> repository) {
    return new WeatherViewModel(repository);
  }
}
